{"version":3,"sources":["TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoList","props","useState","title","setTitle","error","setError","onClickAddTask","trim","addTask","todoListId","changeFilterHandler","id","filter","changeFilter","allBtnClasses","activeBtnClasses","completedBtnClasses","inputClasses","tasksListItems","tasks","length","map","t","taskClasses","isDone","key","type","checked","onChange","e","changeTasksStatus","currentTarget","className","onClick","tId","removeTask","removeTodoList","value","onKeyPress","App","todolistID1","v1","todolistID2","todolists","setTodolists","setTasks","el","taskId","newTask","tasksForTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5eda71a6.chunk.js","sourcesContent":["import React, {KeyboardEvent, ChangeEvent, useState} from 'react';\r\nimport {FilterValuesType} from \"./App\";\r\n\r\n\r\ntype TodoListPropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (todoListId: string, taskId: string) => void\r\n    changeFilter: (id: string, filter: FilterValuesType) => void\r\n    addTask: (todoListId: string, title: string) => void\r\n    changeTasksStatus: (todoListId: string, taskId: string, isDone: boolean) => void\r\n    todoListId: string\r\n    removeTodoList: (todoListId: string) => void\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport const TodoList = (props: TodoListPropsType) => {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onClickAddTask = () => {\r\n        const trimmedTitle = title.trim() // УБИРАЕТ ПРОБЕЛЫ ПО КРАЯМ СТРОКИ\r\n        if (trimmedTitle) {\r\n            props.addTask(props.todoListId, title)\r\n        } else {\r\n            setError(true)\r\n        }\r\n\r\n        setTitle('')\r\n    }\r\n\r\n    const changeFilterHandler = (id: string, filter: FilterValuesType) => {\r\n        props.changeFilter(id, filter)\r\n    }\r\n\r\n    const removeTask = (todoListId: string, tId: string) => {\r\n        props.removeTask(todoListId, tId)\r\n    }\r\n\r\n\r\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        if (error) setError(false)\r\n    }\r\n\r\n    const onKeyPressInput = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        e.key === 'Enter' && onClickAddTask()\r\n    }\r\n\r\n    const allBtnClasses = props.filter === 'all' ? 'active-filter' : ''\r\n    const activeBtnClasses = props.filter === 'active' ? 'active-filter' : ''\r\n    const completedBtnClasses = props.filter === 'completed' ? 'active-filter' : ''\r\n    const inputClasses = error ? 'error' : ''\r\n\r\n    const removeTodoListHandler = () => {\r\n        props.removeTodoList(props.todoListId)\r\n    }\r\n\r\n    const tasksListItems = props.tasks.length\r\n        ? props.tasks.map(t => {\r\n            const taskClasses = t.isDone ? 'is-done' : ''\r\n            const onChangeChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                props.changeTasksStatus(props.todoListId, t.id, e.currentTarget.checked)\r\n            }\r\n            return (\r\n                <li key={t.id}>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked={t.isDone}\r\n                        onChange={onChangeChangeStatus}\r\n                    />\r\n                    <span className={taskClasses}>{t.title}</span>\r\n                    <button onClick={() => removeTask(props.todoListId, t.id)}>del</button>\r\n                </li>\r\n            )\r\n        })\r\n        : <span>В списке нет задач</span>\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>{props.title}\r\n                    <button onClick={removeTodoListHandler}>x</button>\r\n                </h3>\r\n\r\n                <div>\r\n                    <input value={title}\r\n                           onChange={onChangeInput}\r\n                           onKeyPress={onKeyPressInput}\r\n                           className={inputClasses}\r\n                    />\r\n                    <button onClick={onClickAddTask}>+</button>\r\n                    {error && <div className='error-message'>Title is required</div>}\r\n\r\n                </div>\r\n                <ul>\r\n\r\n                    {tasksListItems}\r\n\r\n                </ul>\r\n                <div>\r\n                    <button\r\n                        className={allBtnClasses}\r\n                        onClick={() => changeFilterHandler(props.todoListId, 'all')}>All\r\n                    </button>\r\n                    <button\r\n                        className={activeBtnClasses}\r\n                        onClick={() => changeFilterHandler(props.todoListId, 'active')}>Active\r\n                    </button>\r\n                    <button\r\n                        className={completedBtnClasses}\r\n                        onClick={() => changeFilterHandler(props.todoListId, 'completed')}>Completed\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, TodoList} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\ntype TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n\r\n\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistsType>>([\r\n        {id: todolistID1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistID2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState({\r\n        [todolistID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), title: \"HTML&CSS2\", isDone: true},\r\n            {id: v1(), title: \"JS2\", isDone: true},\r\n            {id: v1(), title: \"ReactJS2\", isDone: false},\r\n            {id: v1(), title: \"Rest API2\", isDone: false},\r\n            {id: v1(), title: \"GraphQL2\", isDone: false},\r\n        ]\r\n    });\r\n\r\n\r\n    const removeTodoList = (todoListId: string) => {\r\n        setTodolists(todolists.filter(el => el.id !== todoListId))\r\n        delete tasks[todoListId]\r\n    }\r\n\r\n\r\n    const removeTask = (todoListId: string, taskId: string) => {\r\n        setTasks({...tasks, [todoListId]: tasks[todoListId].filter(el => taskId !== el.id)})\r\n    }\r\n\r\n    const addTask = (todoListId: string, title: string) => {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title,\r\n            isDone: false\r\n        }\r\n        setTasks({...tasks, [todoListId]: [newTask, ...tasks[todoListId]]})\r\n    }\r\n\r\n\r\n    const changeFilter = (todoListId: string, filter: FilterValuesType) => {\r\n        setTodolists(todolists.map(el => todoListId === el.id ? {...el, filter: filter} : el))\r\n    }\r\n\r\n    const changeTasksStatus = (todoListId: string, taskId: string, isDone: boolean) => {\r\n        setTasks({...tasks, [todoListId]: tasks[todoListId].map(el => el.id === taskId ? {...el, isDone: isDone} : el)})\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todolists.map(el => {\r\n                let tasksForTodoList = tasks[el.id];\r\n                if (el.filter === 'active') {\r\n                    tasksForTodoList = tasks[el.id].filter(t => t.isDone === false)\r\n                }\r\n                if (el.filter === 'completed') {\r\n                    tasksForTodoList = tasks[el.id].filter(t => t.isDone === true)\r\n                }\r\n                return (\r\n                    <TodoList\r\n                        key={el.id}\r\n                        todoListId={el.id}\r\n                        title={el.title}\r\n                        tasks={tasksForTodoList}\r\n                        filter={el.filter}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTasksStatus={changeTasksStatus}\r\n                        removeTodoList={removeTodoList}\r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}